#! /usr/bin/python3

import argparse
import os, sys, shutil


from SalomeOnDemandTK.extension_utilities import logger, \
    INSTALLFILE_EXT, BFILE_EXT, DFILE_EXT, ENVPYFILE_SUF, ARCFILE_EXT

# get salome_appli_dir
try:
    salome_appli_dir = os.environ["SALOME_APPLICATION_DIR"]
except:
    salome_bootstrap_dir = os.path.dirname(os.path.realpath(__file__))
    salome_appli_dir = os.path.dirname(salome_bootstrap_dir)

ext_pkg_dir = os.path.join(salome_appli_dir,"ext_pkg")

def install(extname):
    """ Install extension module in salome_appli_dir
    extname: extension module name
    """
    ext_pkg_name = extname + '.' + ARCFILE_EXT
    ext_pkg_dir_name = os.path.join(ext_pkg_dir,ext_pkg_name)
    if not os.path.isfile(ext_pkg_dir_name):
        logger.error( "Extension package {} does not exist.\nPlease be sure that you have this package in {}"
        .format(ext_pkg_name, ext_pkg_dir_name) )
        return 1
    # Remove old extension
    remove(extname)

    # Unpack the new extension
    logger.info("Install %s"%extname)
    os.environ["SALOME_APPLICATION_DIR"] = salome_appli_dir
    import SalomeOnDemandTK.extension_unpacker as extension_unpacker
    extension_unpacker.install_salomex(ext_pkg_dir_name)
    #extension_unpacker.unpack_salomex(salome_appli_dir, ext_pkg_dir_name)

def remove(extname):
    """ Remove extension module from salome_appli_dir
    extname: extension module name
    """
    logger.info("Remove %s"%extname)
    import SalomeOnDemandTK.extension_remover as extension_remover
    extension_remover.remove_salomex(salome_appli_dir, extname)
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('mode', default=argparse.SUPPRESS, help='We have 3 function in this executable: install, remove')
    parser.add_argument('-p', '--package',default = argparse.SUPPRESS, help = 'extension package name',
                        required=True)

    args = parser.parse_args()

    if args.mode == 'install' or args.mode == 'remove':
        res = globals()[args.mode](args.package)
    else:
        logger.error("%s mode is not found"%args.mode)
        parser.print_help()
